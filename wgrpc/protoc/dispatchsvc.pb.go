// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispatchsvc.proto

package protoc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RouteHeader struct {
	ReqId                string   `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Uid                  string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Appid                string   `protobuf:"bytes,3,opt,name=appid,proto3" json:"appid,omitempty"`
	Cmd                  int32    `protobuf:"varint,4,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteHeader) Reset()         { *m = RouteHeader{} }
func (m *RouteHeader) String() string { return proto.CompactTextString(m) }
func (*RouteHeader) ProtoMessage()    {}
func (*RouteHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_e257fe6785bc7ade, []int{0}
}

func (m *RouteHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteHeader.Unmarshal(m, b)
}
func (m *RouteHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteHeader.Marshal(b, m, deterministic)
}
func (m *RouteHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteHeader.Merge(m, src)
}
func (m *RouteHeader) XXX_Size() int {
	return xxx_messageInfo_RouteHeader.Size(m)
}
func (m *RouteHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RouteHeader proto.InternalMessageInfo

func (m *RouteHeader) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RouteHeader) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *RouteHeader) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *RouteHeader) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

type DispatchReq struct {
	Header               *RouteHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Pbdata               []byte       `protobuf:"bytes,2,opt,name=pbdata,proto3" json:"pbdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DispatchReq) Reset()         { *m = DispatchReq{} }
func (m *DispatchReq) String() string { return proto.CompactTextString(m) }
func (*DispatchReq) ProtoMessage()    {}
func (*DispatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e257fe6785bc7ade, []int{1}
}

func (m *DispatchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DispatchReq.Unmarshal(m, b)
}
func (m *DispatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DispatchReq.Marshal(b, m, deterministic)
}
func (m *DispatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchReq.Merge(m, src)
}
func (m *DispatchReq) XXX_Size() int {
	return xxx_messageInfo_DispatchReq.Size(m)
}
func (m *DispatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchReq proto.InternalMessageInfo

func (m *DispatchReq) GetHeader() *RouteHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DispatchReq) GetPbdata() []byte {
	if m != nil {
		return m.Pbdata
	}
	return nil
}

type DispatchResp struct {
	Header               *RouteHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Cmd                  int32        `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	RetCode              int32        `protobuf:"varint,3,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	Pbdata               []byte       `protobuf:"bytes,4,opt,name=pbdata,proto3" json:"pbdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DispatchResp) Reset()         { *m = DispatchResp{} }
func (m *DispatchResp) String() string { return proto.CompactTextString(m) }
func (*DispatchResp) ProtoMessage()    {}
func (*DispatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e257fe6785bc7ade, []int{2}
}

func (m *DispatchResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DispatchResp.Unmarshal(m, b)
}
func (m *DispatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DispatchResp.Marshal(b, m, deterministic)
}
func (m *DispatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchResp.Merge(m, src)
}
func (m *DispatchResp) XXX_Size() int {
	return xxx_messageInfo_DispatchResp.Size(m)
}
func (m *DispatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchResp proto.InternalMessageInfo

func (m *DispatchResp) GetHeader() *RouteHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DispatchResp) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *DispatchResp) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DispatchResp) GetPbdata() []byte {
	if m != nil {
		return m.Pbdata
	}
	return nil
}

func init() {
	proto.RegisterType((*RouteHeader)(nil), "protoc.RouteHeader")
	proto.RegisterType((*DispatchReq)(nil), "protoc.DispatchReq")
	proto.RegisterType((*DispatchResp)(nil), "protoc.DispatchResp")
}

func init() { proto.RegisterFile("dispatchsvc.proto", fileDescriptor_e257fe6785bc7ade) }

var fileDescriptor_e257fe6785bc7ade = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x95, 0xb6, 0x09, 0xe5, 0xd2, 0x01, 0x8e, 0x82, 0x02, 0x53, 0x95, 0xa9, 0x12, 0x52,
	0x87, 0x22, 0x7e, 0x01, 0x1d, 0x60, 0x3d, 0x76, 0x2a, 0xd7, 0x77, 0x52, 0x33, 0x20, 0x3b, 0x8e,
	0xdb, 0x99, 0x9f, 0x8e, 0xe2, 0x98, 0xd6, 0x12, 0x53, 0x27, 0xdf, 0x9d, 0x9e, 0xde, 0xfb, 0x9e,
	0x0c, 0xb7, 0xdc, 0x74, 0x56, 0x79, 0xbd, 0xef, 0x8e, 0x7a, 0x65, 0x9d, 0xf1, 0x06, 0x8b, 0xf0,
	0xe8, 0xfa, 0x0b, 0x4a, 0x32, 0x07, 0x2f, 0xef, 0xa2, 0x58, 0x1c, 0xde, 0x43, 0xe1, 0xa4, 0xdd,
	0x36, 0x5c, 0x65, 0x8b, 0x6c, 0x79, 0x4d, 0xb9, 0x93, 0xf6, 0x83, 0xf1, 0x06, 0xc6, 0x87, 0x86,
	0xab, 0x51, 0xb8, 0xf5, 0x23, 0xce, 0x21, 0x57, 0xd6, 0x36, 0x5c, 0x8d, 0x07, 0x5d, 0x58, 0x7a,
	0x9d, 0xfe, 0xe6, 0x6a, 0xb2, 0xc8, 0x96, 0x39, 0xf5, 0x63, 0x4d, 0x50, 0x6e, 0x62, 0x38, 0x49,
	0x8b, 0xcf, 0x50, 0xec, 0x43, 0x52, 0xf0, 0x2f, 0xd7, 0x77, 0x03, 0x8e, 0x5e, 0x25, 0x10, 0x14,
	0x25, 0xf8, 0x00, 0x85, 0xdd, 0xb1, 0xf2, 0x2a, 0x04, 0xcf, 0x28, 0x6e, 0xf5, 0x4f, 0x06, 0xb3,
	0xb3, 0x69, 0x67, 0x2f, 0x73, 0x8d, 0x8c, 0xa3, 0x13, 0x23, 0x3e, 0xc2, 0xd4, 0x89, 0xdf, 0x6a,
	0xc3, 0x12, 0xea, 0xe4, 0x74, 0xe5, 0xc4, 0xbf, 0x19, 0x96, 0x04, 0x61, 0x92, 0x22, 0xac, 0x37,
	0xe7, 0x5a, 0x9f, 0x47, 0x8d, 0xaf, 0x30, 0xfd, 0x5b, 0xf1, 0x14, 0x9e, 0xf4, 0x7e, 0x9a, 0xff,
	0x3f, 0x76, 0x76, 0x37, 0x7c, 0xc2, 0xcb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x1f, 0xde,
	0x11, 0xa0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispatchSvcClient is the client API for DispatchSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatchSvcClient interface {
	Dispatch(ctx context.Context, in *DispatchReq, opts ...grpc.CallOption) (*DispatchResp, error)
}

type dispatchSvcClient struct {
	cc *grpc.ClientConn
}

func NewDispatchSvcClient(cc *grpc.ClientConn) DispatchSvcClient {
	return &dispatchSvcClient{cc}
}

func (c *dispatchSvcClient) Dispatch(ctx context.Context, in *DispatchReq, opts ...grpc.CallOption) (*DispatchResp, error) {
	out := new(DispatchResp)
	err := c.cc.Invoke(ctx, "/protoc.DispatchSvc/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatchSvcServer is the server API for DispatchSvc service.
type DispatchSvcServer interface {
	Dispatch(context.Context, *DispatchReq) (*DispatchResp, error)
}

// UnimplementedDispatchSvcServer can be embedded to have forward compatible implementations.
type UnimplementedDispatchSvcServer struct {
}

func (*UnimplementedDispatchSvcServer) Dispatch(ctx context.Context, req *DispatchReq) (*DispatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}

func RegisterDispatchSvcServer(s *grpc.Server, srv DispatchSvcServer) {
	s.RegisterService(&_DispatchSvc_serviceDesc, srv)
}

func _DispatchSvc_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchSvcServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.DispatchSvc/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchSvcServer).Dispatch(ctx, req.(*DispatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DispatchSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoc.DispatchSvc",
	HandlerType: (*DispatchSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _DispatchSvc_Dispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatchsvc.proto",
}
